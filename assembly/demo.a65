THRUSTER_BUS = $0200

ANGULAR_RATE_X = $0205
ANGULAR_RATE_Y = $0206
ANGULAR_RATE_Z = $0207

ANGLE_X = $0208
ANGLE_Y = $0209
ANGLE_Z = $020A
ACCURACY_ANGLE = $020B

TARGET_X = 64
TARGET_Y = 64
TARGET_Z = 64

THRUSTER_BUFFER = $00  ; Zeropage buffer for thruster control
CALIBRATION_DONE = $01 ; Flag to indicate calibration is done

POSITIVE_X_THRUSTERS = $10 ; will contain the address of any thrusters that induce a positive x angular rate
NEGATIVE_X_THRUSTERS = $11 ; will contain the address of any thrusters that induce a negative x angular rate
POSITIVE_Z_THRUSTERS = $12 ; will contain the address of any thrusters that induce a positive z angular rate
NEGATIVE_Z_THRUSTERS = $13 ; will contain the address of any thrusters that induce a negative z angular rate

THRUSTER_CHECK = $14 ; will contain the address of any thrusters that are currently being calibrated

CURRENT_RATE_X = $15 ; will contain the current x angular rate
CURRENT_RATE_Z = $16 ; will contain the current z angular rate

SLEEP_TIMER = $020C

.ORG $0600

start:

    LDA #%11000100
    JSR send_thruster_command    
    JSR idle_for_frames
    JSR idle_for_frames
    JSR idle_for_frames
    JSR idle_for_frames

    LDA #%00000100
    JSR send_thruster_command
    JSR idle_for_frames
    JSR idle_for_frames
    JSR idle_for_frames
    JSR idle_for_frames
    
    JMP start


; calibrate_thrusters:
;     ; fetch the current angular rates before thruster firing
;     LDA ANGULAR_RATE_X
;     STA CURRENT_RATE_X
;     LDA ANGULAR_RATE_Z
;     STA CURRENT_RATE_Z

;     LDA THRUSTER_CHECK
;     ; fire the thrusters
;     JMP fire_thruster
    
;     JSR idle_for_frames
;     JSR idle_for_frames
;     JSR idle_for_frames
;     JSR idle_for_frames
;     JSR idle_for_frames
;     JSR idle_for_frames

;     LDA THRUSTER_CHECK
;     JSR stop_thruster
;     ; fetch the current angular rates after thruster firing
;     LDA ANGULAR_RATE_X
;     STA CURRENT_RATE_X
;     LDA ANGULAR_RATE_Z
;     STA CURRENT_RATE_Z

;     RTS

idle_for_frames:
    LDA #255
    STA SLEEP_TIMER
loop:
    DEC SLEEP_TIMER   ; decrease timer
    BNE loop          ; if not zero, keep looping
    RTS               ; return when done


send_thruster_command:
    STA THRUSTER_BUS ; then infinite loop until the thruster buffer says 01000000
fire_loop:
    LDA THRUSTER_BUS
    AND #%00111111     ; mask off first two bits
    CMP #%00000000     ; when the message has ben processed, the address will be XX000000 with XX being the response code
    BNE fire_loop
    RTS

; ready:
;     LDA #%11000000
;     STA THRUSTER_BUS
;     RTS